/*
Given two strings s and t which consist of only lowercase letters.
String t is generated by random shuffling string s and then add one more letter at a random position.
Find the letter that was added in t.

(Solution 1)
Runtime: 8 ms, faster than 60.03% of C++ online submissions for Find the Difference.
Memory Usage: 9.1 MB, less than 93.39% of C++ online submissions for Find the Difference.

(Solution 2)
Runtime: 4 ms, faster than 100.00% of C++ online submissions for Find the Difference.
Memory Usage: 8.9 MB, less than 97.52% of C++ online submissions for Find the Difference.

(Solution 3)
Runtime: 4 ms, faster than 100.00% of C++ online submissions for Find the Difference.
Memory Usage: 9 MB, less than 96.69% of C++ online submissions for Find the Difference.
*/

//Solution 1
class Solution {
public:
    char findTheDifference(string s, string t) {
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        
        for (int i =0; i <s.size(); ++i){
            if (s[i] != t[i]) return t[i];
        }
        return t[t.size()-1];
    }
};

//Solution 2
class Solution {
public:
    char findTheDifference(string s, string t) {
        //only 26 possible letters
        //place count of each letter in two vectors representing each
        //they must differ by 1 at strictly one position of the vectors
        
        vector<int> s_count(26);
        
        for (char& ch : s) ++s_count[ch -97];//97 is rep of 'a' in ascii
        for (char& ch : t) --s_count[ch-97];
        
        auto it = find(s_count.begin(), s_count.end(), -1);
        char extra = (distance(s_count.begin(), it)+97);
        return extra;
    }
};

//Solution 3
class Solution {
public:
    char findTheDifference(string s, string t) {
        //recall that XOR is both associative and commutative
        //this means that a^b^a == a^a^b == 0^b ==b
        
        int ch = 0;
        
        for (char c : s) ch^=c;
        for (char c : t) ch^= c;
        
        return ch;
    }
};
